

--------------------------------------
web-ui
--------------------------------------

UI = data + style + behavior

 content  ==> HTML
 style    ==> CSS
 behavior ==> javascript


what javascript language can do on HTML-page 
in browser envi?


using w3c standard web APIs, 
javascript programs can do any dynamic actions on web-page
within browser-envi


w3c standard web APIs
    ==> DOM, XHR, Timer, ...


imp-note:
   all w3c standard APIs are implemented 
   by browser vendors nativly,
   and abstracted ti us as javascript objects & functions        

using DOM API
----------------
=> for page manipulation 
 -> can create,retrieve,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program
 -> can create rich UI-components like  autocomplete, calenders,..
 ....

using XHR / Fetch API
----------------------
 => for Async communication with server-side programs

using Timer API
----------------
 => to execute some action(s) on timeout/interval


HTML5 New APIs 
----------------
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5




------------------------------------------------------
limitations/complexities of plain-js(your code ) 
with browser's APIs
------------------------------------------------------ 



=> browser compatibility issues
=> memory management issues should care manually
    ( i.e clean un-used/invisible DOM elements )
=> performance issues should care manually    
    ( i.e DOM access must be minimal )
=> too much code for simple dynamic site 
=> code organization is complex 
    i.e ( View & Model/State is tightly coupled)
=> data binding is manual/complex     


 legacy solution:

   => using server-side page technologies   

      e.g ASP.NET, JSP , PHP , etc....


     limitations on server-side page technologies:
     ---------------------------------------------

     =>  on every request, 
         server-side programs must re-construct new-page,
         with client prev state  

     => on every request,
        server always transfer same static resources with page,
        will increase n/w b/w

     => on every new page,
        browser reloads existing page.

     
modern solution:

      => using client-side page/ui technologies 

       How ?

      => using advanced javascript syntax & apis
      => new browser apis are introduced ( i.e HTML5 APIs)
      => all moderns browsers follows APIs in uniform way   
         +
      => using third-party's javascript lib & frameworks   

   
   javascript utility lib
   -----------------------

   1. jQuery

      => DOM & XHR utility lib 

      limitations on jquery

            --> design & performance issues

    
   mvc based lib & F.W
   --------------------------

   1. backbone.js
   2. knockout.js
   3. ember.js
   4. angular.js  ( popular )
   ....


   
   limitation with MVC on UI-application

   ==> un-predictable data flow b/w Model & View,
       due to 2-way data-binding

   ==> can't build re-usable UI fragments/components     
           

   
   soln:

   ==>  component based arch
        

   how to development UI components ?


      way-1 : using w3c standard apis 
      --------------------------------

         => HTML template
         => shadow DOM
         => custom elements


      way-2 : using third party's js lib & F.Ws
      ------------------------------------------

         a. react.js from facebook  : v17  
         b. angular                 : v7 ( our focus )
         c. Vue
         d. polymer.js
         ..

      -------------------------------------------   




      component based UI arch
      -------------------------

      what is component in UI ?

      ==> any UI-fragment with single responsibility 
         ( i.e simpler & smaller)

      e.g

            <input/>, <calender /> .....

       imp-note :

         => by default HTML follows 'component based arch '
         

      principles of components
      -------------------------   

      => must have single-responsibility 
         -> to keep smaller & simpler  
      => must be loosely from other
         -> to re-use anywhere 
      => can take props from parent-component
         -> to customize based on requirement
      => must not mutate given props   
         -> to keep data consistency
      => can be stateless & state-full
      => state is mutable
         -> can mutate on event
      => on state change , component must re-render 
       => inter-component communication 
          should happen via parent    ( uni-directional data flow )
         => parent to child ==> via props
         => child to parent ==>> via events   


   -----------------------------------------


      sometime we need components like 

      <calender /> 
      <box />
      <search /> 
      <graph />


      to create this type of custom components,
      we r going to use react.js 'library'

   -----------------------------------------------

   Typescript

   -----------------------------------------------


   Dev-Envi setup
   ---------------

      - javascript runtime ==> Node.js
      - package manager    ==> npm | yarn
      
      - transpiler/compiler ==> babel/ts compiler / ..
      - linting            ==> ES-lint
      - module bundler     ==> webpack
      - unit-testing       ==> jasmine
      - test runner        ==> karma
      - e2e test runner    ==> protractor
      ...


      cli tool
         - angular-cli

     ------------------------------------------------- 


      > npm i -g @angular/cli

      on workspace

      > ng new <app-name>

   ------------------------------------------------- 


   angular project
   ---------------


      - Ng module(s)

         => group of related directives,pipes ( UI ) & services ( Non-UI)


   ------------------------------------------------- 

   NG topics
   ----------

   A. directives
   --------------

      ==> direction(s), how to render UI 

      1. component  ( directive + template + css )

         => to bring new UI fragment

      2. structural

         => to change component's template structure

         <element *directiveName="expression"></element>

         e.g
            ngIf
            ngFor
            ngSwitch
            ...

      3. attribute/property

            ==> to change element's attributes

         e.g
            ngClass   


   B. data binding
   ----------------

      1. interpolation

         syntax: 
         {{expression}}

      2. property-binding 

         syntax: 
         <element property1="static-value" [property2]="expression"/>   

      3. event-binding

         syntax: 
         <element (event-name)="handler($event)"/>   

   ------------------------------------------      




Arch.. design issues   
------------------------------------------

===> state/model/ui-data is scattered across UI components
===> state & state-change logic & network/service calls 
     are tightly-coupled with UI components
===> if same state is required in multiple components 
     either we should duplicate that state in components 
     or we should pass via input properties           
===> Unit-Testing is very difficult in components
===> we cant re-use same components across different pages 
     or application


solution:

==> isolate common state & state change logic & n/wing logic 
    from UI components


How ?

soln:

using MVC pattern

    --> bi-directional data-flow b/w view & state/model

  
soln in angular:

   => using service objects


features of NG services:

   => by default, singleton
   => dependents always get services via DI principle